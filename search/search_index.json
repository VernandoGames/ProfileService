{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home ProfileService is a stand-alone ModuleScript that particularly specialises in loading and auto-saving DataStore profiles as well as providing easy tools for managing session-locking of those profiles. Essentially, I'm providing you a ModuleScript that loads up a regular Lua table you can write to directly. It handles auto-saving, multiple server session-locking collisions, server shutdowns and crashes for you. If anything is missing or broken, file an issue on GitHub . If you need help integrating ProfileService into your project, join the discussion . Disclaimer : Although ProfileService has been thoroughly tested (Auto testing source included - ProfileTest.lua ), it has not been used within a large scale Roblox project yet. ProfileService is the successor to an earlier DataStore implementation used in The Mad Murderer 2 Why not DataStore2? The ideology of DataStore2 (Berezaa method) is to \"Make your game playable no matter what, no matter the cost\" . If you're familiar with what you're doing, then it might be a viable solution. However, it might not be productive to glorify a module for it's reliability when there have been no other open source solutions for preventing data loss and item duplication problems. ProfileService is striving to be a DataStore solution that is the most accurate implementation of data storage following the development guidelines and practices provided in the official Roblox API . It's also lightweight, featuring only the most essential functionalities for your personal implementation and guiding you away from flawed practices. Lets not forget that a fair slice of data protection responsibility falls on the shoulders of the developer as well - data loss is possible no matter the module you choose to use. Test your systems!","title":"Home"},{"location":"#home","text":"ProfileService is a stand-alone ModuleScript that particularly specialises in loading and auto-saving DataStore profiles as well as providing easy tools for managing session-locking of those profiles. Essentially, I'm providing you a ModuleScript that loads up a regular Lua table you can write to directly. It handles auto-saving, multiple server session-locking collisions, server shutdowns and crashes for you. If anything is missing or broken, file an issue on GitHub . If you need help integrating ProfileService into your project, join the discussion . Disclaimer : Although ProfileService has been thoroughly tested (Auto testing source included - ProfileTest.lua ), it has not been used within a large scale Roblox project yet. ProfileService is the successor to an earlier DataStore implementation used in The Mad Murderer 2","title":"Home"},{"location":"#why-not-datastore2","text":"The ideology of DataStore2 (Berezaa method) is to \"Make your game playable no matter what, no matter the cost\" . If you're familiar with what you're doing, then it might be a viable solution. However, it might not be productive to glorify a module for it's reliability when there have been no other open source solutions for preventing data loss and item duplication problems. ProfileService is striving to be a DataStore solution that is the most accurate implementation of data storage following the development guidelines and practices provided in the official Roblox API . It's also lightweight, featuring only the most essential functionalities for your personal implementation and guiding you away from flawed practices. Lets not forget that a fair slice of data protection responsibility falls on the shoulders of the developer as well - data loss is possible no matter the module you choose to use. Test your systems!","title":"Why not DataStore2?"},{"location":"api/","text":"Warning Never yield (use wait() or asynchronous Roblox API calls) inside listener functions Notice Methods with Async in their name are methods that will yield - just like wait() ProfileService ProfileService.ServiceLocked ProfileService . ServiceLocked [ bool ] Set to false when the Roblox server is shutting down. ProfileStore methods should not be called after this value is set to false ProfileService.IssueSignal ProfileService . IssueSignal [ ScriptSignal ]( error_message [ string ]) Analytics endpoint for DataStore error logging. Example usage: ProfileService . IssueSignal : Connect ( function ( error_message ) pcall ( function () AnalyticsService : FireEvent ( \"ProfileServiceIssue\" , error_message ) end ) end ) ProfileService.CorruptionSignal ProfileService . CorruptionSignal [ ScriptSignal ]( profile_store_name [ string ], profile_key [ string ]) Analytics endpoint for cases when a DataStore key returns a value that has all or some of it's profile components set to invalid data types. E.g., accidentally setting Profile.Data to a non table value ProfileService.CriticalStateSignal ProfileService . CriticalStateSignal [ ScriptSignal ] ( is_critical_state [ bool ]) Analytics endpoint for cases when DataStore is throwing too many errors and it's most likely affecting your game really really bad - this could be due to developer errrors or due to Roblox server problems. Could be used to alert players about data store outages. ProfileService.GetProfileStore() ProfileService . GetProfileStore ( profile_store_name , profile_template ) --> [ProfileStore] -- profile_store_name [string] -- DataStore name -- profile_template [table] -- Profile.Data will default to -- given table (deep-copy) when no data was saved previously ProfileStore objects expose methods for loading / viewing profiles and sending global updates. Equivalent of :GetDataStore() in Roblox DataStoreService API. ProfileStore ProfileStore:LoadProfileAsync() ProfileStore : LoadProfileAsync ( profile_key , not_released_handler ) --> [Profile] or nil -- profile_key [string] -- DataStore key -- not_released_handler \"ForceLoad\" or [function](place_id, game_job_id) For basic usage, pass \"ForceLoad\" for the not_released_handler argument. not_released_handler as a function argument is called when the profile is session-locked by a remote Roblox server: local profile = ProfileStore : LoadProfileAsync ( \"Player_2312310\" , function ( place_id , game_job_id ) -- place_id and game_job_id identify the Roblox server that has -- this profile currently locked. In rare cases, if the server -- crashes, the profile will stay locked until ForceLoaded by -- a new session. return \"Repeat\" or \"Cancel\" or \"ForceLoad\" end ) not_released_handler must return one of the three values: return \"Repeat\" - ProfileService will repeat the profile loading proccess and may call the release handler again return \"Cancel\" - :LoadProfileAsync() will immediately return nil return \"ForceLoad\" - ProfileService will indefinetly attempt to load the profile. If the profile is session-locked by a remote Roblox server, it will either be released for that remote server or \"stolen\" (Stealing is nescessary for remote servers that are not responding in time and for handling crashed server session-locks). Warning :LoadProfileAsync() can return nil when another remote Roblox server attempts to load the profile at the same time. This case should be extremely rare and it would be recommended to :Kick() the player if :LoadProfileAsync() does not return a Profile object. ProfileStore:GlobalUpdateProfileAsync() ProfileStore : GlobalUpdateProfileAsync ( profile_key , update_handler ) --> [GlobalUpdates] or nil -- profile_key [string] -- DataStore key -- update_handler [function](global_updates) -- This function is -- called with a GlobalUpdates object Example usage of :GlobalUpdateProfileAsync() : ProfileStore : GlobalUpdateProfileAsync ( \"Player_2312310\" , function ( global_updates ) global_updates : AddActiveUpdate ({ Type = \"AdminGift\" , Item = \"Coins\" , Amount = 1000 , }) end ) Notice :GlobalUpdateProfileAsync() will work for profiles that haven't been created (profiles are created when they're loaded using :LoadProfileAsync() for the first time) ProfileStore:ViewProfileAsync() ProfileStore : ViewProfileAsync ( profile_key ) --> [Profile] or nil -- profile_key [string] -- DataStore key Writing and saving is not possible for profiles in view mode. Profile.Data and Profile.MetaData will be nil if the profile hasn't been created. Profile Profile.Data Profile . Data [ table ] Profile.Data is the primary variable of a Profile object. The developer is free to read and write from the table while it is automatically saved to the DataStore . Profile.Data will no longer be saved after being released remotely or locally via Profile:Release() . Profile.MetaData Profile . MetaData [ table ] ( Read - only ) -- Data about the profile itself Profile . MetaData . ProfileCreateTime [ number ] ( Read - only ) -- os.time() timestamp of profile creation Profile . MetaData . SessionLoadCount [ number ] ( Read - only ) -- Amount of times the profile was loaded Profile . MetaData . ActiveSession [ table ] or nil ( Read - only ) -- {place_id, game_job_id} or nil -- Set to a session link if a Roblox server is currently the -- owner of this profile; nil if released Profile . MetaData . MetaTags [ table ] ( Writable ) -- {[\"tag_name\"] = tag_value, ...} -- Saved and auto-saved just like Profile.Data Profile . MetaData . MetaTagsLatest [ table ] ( Read - only ) -- the most recent version of MetaData.MetaTags which has -- been saved to the DataStore during the last auto-save -- or Profile:Save() call Profile.MetaData is a table containing data about the profile itself. Profile.MetaData.MetaTags is saved on the same DataStore key together with Profile.Data . Notice You can use Profile.MetaData.MetaTagsLatest for product purchase confirmation (By storing receiptInfo.PurchaseId values inside Profile.MetaData.MetaTags and waiting for them to appear in Profile.MetaData.MetaTagsLatest ). Don't forget to clear really old PurchaseId 's to stay under DataStore limits. Profile.GlobalUpdates Profile . GlobalUpdates [ GlobalUpdates ] This is the GlobalUpdates object tied to this specific Profile . It exposes GlobalUpdates methods for update processing. Profile:IsActive() Profile : IsActive () --> [bool] Returns true while the profile is session-locked and saving of changes to Profile.Data is guaranteed. Profile:GetMetaTag() Profile : GetMetaTag ( tag_name ) --> value -- tag_name [string] Profile:ListenToRelease() Profile : ListenToRelease ( listener ) --> [ScriptConnection] () -- listener [function]() Listener functions subscribed to Profile:ListenToRelease() will be called when the profile is released remotely (Being \"ForceLoad\" 'ed on a remote server) or locally ( Profile:Release() ). In common practice, the profile will rarely be released before the player leaves the game so it's recommended to simply :Kick() the Player when this happens. Profile:Release() Profile : Release () Removes the session lock for this profile for this Roblox server. Call this method after you're done working with the Profile object. Profile data will be immediately saved for the last time. Profile:SetMetaTag() Profile : SetMetaTag ( tag_name , value ) -- tag_name [string] -- value -- Any value supported by DataStore Warning Calling Profile:SetMetaTag() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. Notice You may also read / write directly inside Profile.MetaData.MetaTags Profile:Save() Profile : Save () -- Call to quickly progress GlobalUpdates -- state or to speed up save validation processes -- (Does not yield) Call Profile:Save() to quickly progress GlobalUpdates state or to speed up the propagation of Profile.MetaData.MetaTags changes to Profile.MetaData.MetaTagsLatest . Profile:Save() should not be called for saving Profile.Data or Profile.MetaData.MetaTags - this is already done for you automatically. Warning Calling Profile:Save() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. GlobalUpdates Global updates is a powerful feature of ProfileService, used for sending information to a desired player profile across servers, within the server or to a player profile that is not currently active in any Roblox server. The primary intended use of global updates is to support sending gifts among players, or giving items to players through a custom admin tool. The benefit of using global updates is it's API simplicity (This is as simple as it gets, sorry \ud83d\ude02) and the fact that global updates are pulled from the DataStore whenever the profile is auto-saved at no additional expense of more DataStore calls! Global updates can be Active , Locked and Cleared : Whenever a global update is created, it will be Active by default Active updates can be changed or cleared within a :GlobalUpdateProfileAsync() call Normally, when the profile is active on a Roblox server, you should always progress all Active updates to the Locked state Locked updates can no longer be changed or cleared within a :GlobalUpdateProfileAsync() call Locked updates are ready to be processed (e.g., add gift to player inventory) and imediately Locked by calling :LockActiveUpdate(update_id) Cleared updates will immediately disappear from the profile forever Always available GlobalUpdates:GetActiveUpdates() GlobalUpdates : GetActiveUpdates () --> [table] { {update_id, update_data}, ...} Should be used at startup to scan and progress any pending Active updates to Locked state. GlobalUpdates:GetLockedUpdates() GlobalUpdates : GetLockedUpdates () --> [table] { {update_id, update_data}, ...} Should be used at startup to scan and progress any pending Locked updates to Cleared state. Only when accessed from Profile.GlobalUpdates GlobalUpdates:ListenToNewActiveUpdate() GlobalUpdates : ListenToNewActiveUpdate ( listener ) --> [ScriptConnection] -- listener [function](update_id, update_data) In most games, you should progress all Active updates to Locked state: profile . GlobalUpdates : ListenToNewActiveUpdate ( function ( update_id , update_data ) profile . GlobalUpdates : LockActiveUpdate ( update_id ) end ) GlobalUpdates:ListenToNewLockedUpdate() GlobalUpdates : ListenToNewLockedUpdate ( listener ) --> [ScriptConnection] -- listener [function](update_id, update_data) -- Must always call GlobalUpdates:ClearLockedUpdate(update_id) -- after processing the locked update. When you get a Locked update via GlobalUpdates:ListenToNewLockedUpdate() , the update is ready to be proccessed and immediately locked: profile . GlobalUpdates : ListenToNewLockedUpdate ( function ( update_id , update_data ) if update_data . Type == \"AdminGift\" and update_data . Item == \"Coins\" then profile . Data . Coins = profile . Data . Coins + update_data . Amount end profile . GlobalUpdates : ClearLockedUpdate ( update_id ) end ) GlobalUpdates:LockActiveUpdate() GlobalUpdates : LockActiveUpdate ( update_id ) -- update_id [number] -- Id of an existing global update Turns an Active update into a Locked update. Will invoke GlobalUpdates:ListenToNewLockedUpdate() after an auto-save (less than 30 seconds) or Profile:Save() . Warning Calling GlobalUpdates:LockActiveUpdate() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. ProfileService guarantees that the Profile will be active when GlobalUpdates:ListenToNewActiveUpdate() listeners are triggered. GlobalUpdates:ClearLockedUpdate() GlobalUpdates : ClearLockedUpdate ( update_id ) -- update_id [number] -- Id of an existing global update Clears a Locked update completely from the profile. Warning Calling GlobalUpdates:ClearLockedUpdate() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. ProfileService guarantees that the Profile will be active when GlobalUpdates:ListenToNewLockedUpdate() listeners are triggered. Available inside update_handler during a ProfileStore:GlobalUpdateProfileAsync() call GlobalUpdates:AddActiveUpdate() GlobalUpdates : AddActiveUpdate ( update_data ) -- update_data [table] -- Your custom global update data Used to send a new Active update to the profile. GlobalUpdates:ChangeActiveUpdate() GlobalUpdates : ChangeActiveUpdate ( update_id , update_data ) -- update_id [number] -- Id of an existing global update -- update_data [table] -- New data that replaces previously set update_data Changing Active updates can be used for stacking player gifts, particularly when lots of players can be sending lots of gifts to a Youtube celebrity so the Profile would not exceed the DataStore data limit . GlobalUpdates:ClearActiveUpdate() GlobalUpdates : ClearActiveUpdate ( update_id ) -- update_id [number] -- Id of an existing global update Removes an Active update from the profile completely.","title":"API"},{"location":"api/#profileservice","text":"","title":"ProfileService"},{"location":"api/#profileserviceservicelocked","text":"ProfileService . ServiceLocked [ bool ] Set to false when the Roblox server is shutting down. ProfileStore methods should not be called after this value is set to false","title":"ProfileService.ServiceLocked"},{"location":"api/#profileserviceissuesignal","text":"ProfileService . IssueSignal [ ScriptSignal ]( error_message [ string ]) Analytics endpoint for DataStore error logging. Example usage: ProfileService . IssueSignal : Connect ( function ( error_message ) pcall ( function () AnalyticsService : FireEvent ( \"ProfileServiceIssue\" , error_message ) end ) end )","title":"ProfileService.IssueSignal"},{"location":"api/#profileservicecorruptionsignal","text":"ProfileService . CorruptionSignal [ ScriptSignal ]( profile_store_name [ string ], profile_key [ string ]) Analytics endpoint for cases when a DataStore key returns a value that has all or some of it's profile components set to invalid data types. E.g., accidentally setting Profile.Data to a non table value","title":"ProfileService.CorruptionSignal"},{"location":"api/#profileservicecriticalstatesignal","text":"ProfileService . CriticalStateSignal [ ScriptSignal ] ( is_critical_state [ bool ]) Analytics endpoint for cases when DataStore is throwing too many errors and it's most likely affecting your game really really bad - this could be due to developer errrors or due to Roblox server problems. Could be used to alert players about data store outages.","title":"ProfileService.CriticalStateSignal"},{"location":"api/#profileservicegetprofilestore","text":"ProfileService . GetProfileStore ( profile_store_name , profile_template ) --> [ProfileStore] -- profile_store_name [string] -- DataStore name -- profile_template [table] -- Profile.Data will default to -- given table (deep-copy) when no data was saved previously ProfileStore objects expose methods for loading / viewing profiles and sending global updates. Equivalent of :GetDataStore() in Roblox DataStoreService API.","title":"ProfileService.GetProfileStore()"},{"location":"api/#profilestore","text":"","title":"ProfileStore"},{"location":"api/#profilestoreloadprofileasync","text":"ProfileStore : LoadProfileAsync ( profile_key , not_released_handler ) --> [Profile] or nil -- profile_key [string] -- DataStore key -- not_released_handler \"ForceLoad\" or [function](place_id, game_job_id) For basic usage, pass \"ForceLoad\" for the not_released_handler argument. not_released_handler as a function argument is called when the profile is session-locked by a remote Roblox server: local profile = ProfileStore : LoadProfileAsync ( \"Player_2312310\" , function ( place_id , game_job_id ) -- place_id and game_job_id identify the Roblox server that has -- this profile currently locked. In rare cases, if the server -- crashes, the profile will stay locked until ForceLoaded by -- a new session. return \"Repeat\" or \"Cancel\" or \"ForceLoad\" end ) not_released_handler must return one of the three values: return \"Repeat\" - ProfileService will repeat the profile loading proccess and may call the release handler again return \"Cancel\" - :LoadProfileAsync() will immediately return nil return \"ForceLoad\" - ProfileService will indefinetly attempt to load the profile. If the profile is session-locked by a remote Roblox server, it will either be released for that remote server or \"stolen\" (Stealing is nescessary for remote servers that are not responding in time and for handling crashed server session-locks). Warning :LoadProfileAsync() can return nil when another remote Roblox server attempts to load the profile at the same time. This case should be extremely rare and it would be recommended to :Kick() the player if :LoadProfileAsync() does not return a Profile object.","title":"ProfileStore:LoadProfileAsync()"},{"location":"api/#profilestoreglobalupdateprofileasync","text":"ProfileStore : GlobalUpdateProfileAsync ( profile_key , update_handler ) --> [GlobalUpdates] or nil -- profile_key [string] -- DataStore key -- update_handler [function](global_updates) -- This function is -- called with a GlobalUpdates object Example usage of :GlobalUpdateProfileAsync() : ProfileStore : GlobalUpdateProfileAsync ( \"Player_2312310\" , function ( global_updates ) global_updates : AddActiveUpdate ({ Type = \"AdminGift\" , Item = \"Coins\" , Amount = 1000 , }) end ) Notice :GlobalUpdateProfileAsync() will work for profiles that haven't been created (profiles are created when they're loaded using :LoadProfileAsync() for the first time)","title":"ProfileStore:GlobalUpdateProfileAsync()"},{"location":"api/#profilestoreviewprofileasync","text":"ProfileStore : ViewProfileAsync ( profile_key ) --> [Profile] or nil -- profile_key [string] -- DataStore key Writing and saving is not possible for profiles in view mode. Profile.Data and Profile.MetaData will be nil if the profile hasn't been created.","title":"ProfileStore:ViewProfileAsync()"},{"location":"api/#profile","text":"","title":"Profile"},{"location":"api/#profiledata","text":"Profile . Data [ table ] Profile.Data is the primary variable of a Profile object. The developer is free to read and write from the table while it is automatically saved to the DataStore . Profile.Data will no longer be saved after being released remotely or locally via Profile:Release() .","title":"Profile.Data"},{"location":"api/#profilemetadata","text":"Profile . MetaData [ table ] ( Read - only ) -- Data about the profile itself Profile . MetaData . ProfileCreateTime [ number ] ( Read - only ) -- os.time() timestamp of profile creation Profile . MetaData . SessionLoadCount [ number ] ( Read - only ) -- Amount of times the profile was loaded Profile . MetaData . ActiveSession [ table ] or nil ( Read - only ) -- {place_id, game_job_id} or nil -- Set to a session link if a Roblox server is currently the -- owner of this profile; nil if released Profile . MetaData . MetaTags [ table ] ( Writable ) -- {[\"tag_name\"] = tag_value, ...} -- Saved and auto-saved just like Profile.Data Profile . MetaData . MetaTagsLatest [ table ] ( Read - only ) -- the most recent version of MetaData.MetaTags which has -- been saved to the DataStore during the last auto-save -- or Profile:Save() call Profile.MetaData is a table containing data about the profile itself. Profile.MetaData.MetaTags is saved on the same DataStore key together with Profile.Data . Notice You can use Profile.MetaData.MetaTagsLatest for product purchase confirmation (By storing receiptInfo.PurchaseId values inside Profile.MetaData.MetaTags and waiting for them to appear in Profile.MetaData.MetaTagsLatest ). Don't forget to clear really old PurchaseId 's to stay under DataStore limits.","title":"Profile.MetaData"},{"location":"api/#profileglobalupdates","text":"Profile . GlobalUpdates [ GlobalUpdates ] This is the GlobalUpdates object tied to this specific Profile . It exposes GlobalUpdates methods for update processing.","title":"Profile.GlobalUpdates"},{"location":"api/#profileisactive","text":"Profile : IsActive () --> [bool] Returns true while the profile is session-locked and saving of changes to Profile.Data is guaranteed.","title":"Profile:IsActive()"},{"location":"api/#profilegetmetatag","text":"Profile : GetMetaTag ( tag_name ) --> value -- tag_name [string]","title":"Profile:GetMetaTag()"},{"location":"api/#profilelistentorelease","text":"Profile : ListenToRelease ( listener ) --> [ScriptConnection] () -- listener [function]() Listener functions subscribed to Profile:ListenToRelease() will be called when the profile is released remotely (Being \"ForceLoad\" 'ed on a remote server) or locally ( Profile:Release() ). In common practice, the profile will rarely be released before the player leaves the game so it's recommended to simply :Kick() the Player when this happens.","title":"Profile:ListenToRelease()"},{"location":"api/#profilerelease","text":"Profile : Release () Removes the session lock for this profile for this Roblox server. Call this method after you're done working with the Profile object. Profile data will be immediately saved for the last time.","title":"Profile:Release()"},{"location":"api/#profilesetmetatag","text":"Profile : SetMetaTag ( tag_name , value ) -- tag_name [string] -- value -- Any value supported by DataStore Warning Calling Profile:SetMetaTag() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. Notice You may also read / write directly inside Profile.MetaData.MetaTags","title":"Profile:SetMetaTag()"},{"location":"api/#profilesave","text":"Profile : Save () -- Call to quickly progress GlobalUpdates -- state or to speed up save validation processes -- (Does not yield) Call Profile:Save() to quickly progress GlobalUpdates state or to speed up the propagation of Profile.MetaData.MetaTags changes to Profile.MetaData.MetaTagsLatest . Profile:Save() should not be called for saving Profile.Data or Profile.MetaData.MetaTags - this is already done for you automatically. Warning Calling Profile:Save() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method.","title":"Profile:Save()"},{"location":"api/#globalupdates","text":"Global updates is a powerful feature of ProfileService, used for sending information to a desired player profile across servers, within the server or to a player profile that is not currently active in any Roblox server. The primary intended use of global updates is to support sending gifts among players, or giving items to players through a custom admin tool. The benefit of using global updates is it's API simplicity (This is as simple as it gets, sorry \ud83d\ude02) and the fact that global updates are pulled from the DataStore whenever the profile is auto-saved at no additional expense of more DataStore calls! Global updates can be Active , Locked and Cleared : Whenever a global update is created, it will be Active by default Active updates can be changed or cleared within a :GlobalUpdateProfileAsync() call Normally, when the profile is active on a Roblox server, you should always progress all Active updates to the Locked state Locked updates can no longer be changed or cleared within a :GlobalUpdateProfileAsync() call Locked updates are ready to be processed (e.g., add gift to player inventory) and imediately Locked by calling :LockActiveUpdate(update_id) Cleared updates will immediately disappear from the profile forever","title":"GlobalUpdates"},{"location":"api/#always-available","text":"","title":"Always available"},{"location":"api/#globalupdatesgetactiveupdates","text":"GlobalUpdates : GetActiveUpdates () --> [table] { {update_id, update_data}, ...} Should be used at startup to scan and progress any pending Active updates to Locked state.","title":"GlobalUpdates:GetActiveUpdates()"},{"location":"api/#globalupdatesgetlockedupdates","text":"GlobalUpdates : GetLockedUpdates () --> [table] { {update_id, update_data}, ...} Should be used at startup to scan and progress any pending Locked updates to Cleared state.","title":"GlobalUpdates:GetLockedUpdates()"},{"location":"api/#only-when-accessed-from-profileglobalupdates","text":"","title":"Only when accessed from Profile.GlobalUpdates"},{"location":"api/#globalupdateslistentonewactiveupdate","text":"GlobalUpdates : ListenToNewActiveUpdate ( listener ) --> [ScriptConnection] -- listener [function](update_id, update_data) In most games, you should progress all Active updates to Locked state: profile . GlobalUpdates : ListenToNewActiveUpdate ( function ( update_id , update_data ) profile . GlobalUpdates : LockActiveUpdate ( update_id ) end )","title":"GlobalUpdates:ListenToNewActiveUpdate()"},{"location":"api/#globalupdateslistentonewlockedupdate","text":"GlobalUpdates : ListenToNewLockedUpdate ( listener ) --> [ScriptConnection] -- listener [function](update_id, update_data) -- Must always call GlobalUpdates:ClearLockedUpdate(update_id) -- after processing the locked update. When you get a Locked update via GlobalUpdates:ListenToNewLockedUpdate() , the update is ready to be proccessed and immediately locked: profile . GlobalUpdates : ListenToNewLockedUpdate ( function ( update_id , update_data ) if update_data . Type == \"AdminGift\" and update_data . Item == \"Coins\" then profile . Data . Coins = profile . Data . Coins + update_data . Amount end profile . GlobalUpdates : ClearLockedUpdate ( update_id ) end )","title":"GlobalUpdates:ListenToNewLockedUpdate()"},{"location":"api/#globalupdateslockactiveupdate","text":"GlobalUpdates : LockActiveUpdate ( update_id ) -- update_id [number] -- Id of an existing global update Turns an Active update into a Locked update. Will invoke GlobalUpdates:ListenToNewLockedUpdate() after an auto-save (less than 30 seconds) or Profile:Save() . Warning Calling GlobalUpdates:LockActiveUpdate() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. ProfileService guarantees that the Profile will be active when GlobalUpdates:ListenToNewActiveUpdate() listeners are triggered.","title":"GlobalUpdates:LockActiveUpdate()"},{"location":"api/#globalupdatesclearlockedupdate","text":"GlobalUpdates : ClearLockedUpdate ( update_id ) -- update_id [number] -- Id of an existing global update Clears a Locked update completely from the profile. Warning Calling GlobalUpdates:ClearLockedUpdate() when the Profile is released will throw an error. You can check Profile:IsActive() before using this method. ProfileService guarantees that the Profile will be active when GlobalUpdates:ListenToNewLockedUpdate() listeners are triggered.","title":"GlobalUpdates:ClearLockedUpdate()"},{"location":"api/#available-inside-update_handler-during-a-profilestoreglobalupdateprofileasync-call","text":"","title":"Available inside update_handler during a ProfileStore:GlobalUpdateProfileAsync() call"},{"location":"api/#globalupdatesaddactiveupdate","text":"GlobalUpdates : AddActiveUpdate ( update_data ) -- update_data [table] -- Your custom global update data Used to send a new Active update to the profile.","title":"GlobalUpdates:AddActiveUpdate()"},{"location":"api/#globalupdateschangeactiveupdate","text":"GlobalUpdates : ChangeActiveUpdate ( update_id , update_data ) -- update_id [number] -- Id of an existing global update -- update_data [table] -- New data that replaces previously set update_data Changing Active updates can be used for stacking player gifts, particularly when lots of players can be sending lots of gifts to a Youtube celebrity so the Profile would not exceed the DataStore data limit .","title":"GlobalUpdates:ChangeActiveUpdate()"},{"location":"api/#globalupdatesclearactiveupdate","text":"GlobalUpdates : ClearActiveUpdate ( update_id ) -- update_id [number] -- Id of an existing global update Removes an Active update from the profile completely.","title":"GlobalUpdates:ClearActiveUpdate()"},{"location":"tutorial/basic_usage/","text":"Most of the work with ProfileService is setting up your data loading code. Afterwards, data is read and written directly to the Profile.Data table without the nescessety to use any ProfileService method calls - you set up your own read / write functions, wrappers, classes with profiles as components, etc! The code below is a basic profile loader implementation for ProfileService: Note Unlike most custom DataStore modules where you would listen for Players.PlayerRemoving to clean up, ProfileService may release (destroy) the profile before the player leaves the server - this has to be handled by using Profile:ListenToRelease(listener_function) - any amount of functions can be added! -- ProfileTemplate table is what empty profiles will default to. -- Updating the template will not include missing template values -- in existing player profiles! local ProfileTemplate = { Cash = 0 , Items = {}, LogInTimes = 0 , } ----- Loaded Modules ----- local ProfileService = require ( game . ServerScriptService . ProfileService ) ----- Private Variables ----- local Players = game : GetService ( \"Players\" ) local GameProfileStore = ProfileService . GetProfileStore ( \"PlayerData\" , ProfileTemplate ) local Profiles = {} -- [player] = profile ----- Private Functions ----- local function GiveCash ( profile , amount ) -- If \"Cash\" was not defined in the ProfileTemplate at game launch, -- you will have to perform the following: if profile . Data . Cash == nil then profile . Data . Cash = 0 end -- Increment the \"Cash\" value: profile . Data . Cash = profile . Data . Cash + amount end local function DoSomethingWithALoadedProfile ( player , profile ) profile . Data . LogInTimes = profile . Data . LogInTimes + 1 print ( player . Name .. \" has logged in \" .. tostring ( profile . Data . LogInTimes ) .. \" time\" .. (( profile . Data . LogInTimes > 1 ) and \"s\" or \"\" )) GiveCash ( profile , 100 ) print ( player . Name .. \" owns \" .. tostring ( profile . Data . Cash ) .. \" now!\" ) end local function PlayerAdded ( player ) local profile = GameProfileStore : LoadProfileAsync ( \"Player_\" .. player . UserId , \"ForceLoad\" ) if profile ~= nil then profile : ListenToRelease ( function () Profiles [ player ] = nil -- The profile could've been loaded on another Roblox server: player : Kick () end ) if player : IsDescendantOf ( Players ) == true then Profiles [ player ] = profile -- A profile has been successfully loaded: DoSomethingWithALoadedProfile ( player , profile ) else -- Player left before the profile loaded: profile : Release () end else -- The profile couldn't be loaded possibly due to other -- Roblox servers trying to load this profile at the same time: player : Kick () end end ----- Initialize ----- -- In case Players have joined the server earlier than this script ran: for _ , player in ipairs ( Players : GetPlayers ()) do coroutine.wrap ( PlayerAdded )( player ) end ----- Connections ----- Players . PlayerAdded : Connect ( PlayerAdded ) Players . PlayerRemoving : Connect ( function ( player ) local profile = Profiles [ player ] if profile ~= nil then profile : Release () end end )","title":"Basic Usage"},{"location":"tutorial/settingup/","text":"ProfileService is supposed to be a ModuleScript which you can place inside your Roblox place's ServerScriptService or wherever else you prefer. ProfileService can only be used server-side Option #1: Get ProfileService from the Roblox library Get the library model here Move \"ProfileService\" ModuleScript to ServerScriptService: Option #2: Github ProfileService repository","title":"Setting up"},{"location":"tutorial/settingup/#option-1-get-profileservice-from-the-roblox-library","text":"Get the library model here Move \"ProfileService\" ModuleScript to ServerScriptService:","title":"Option #1: Get ProfileService from the Roblox library"},{"location":"tutorial/settingup/#option-2-github","text":"ProfileService repository","title":"Option #2: Github"}]}